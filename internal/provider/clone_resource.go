package provider

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	sdkResource "github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/pkg/errors"
	"gitlab.com/postgres-ai/database-lab/v3/pkg/client/dblabapi"
	dblabTypes "gitlab.com/postgres-ai/database-lab/v3/pkg/client/dblabapi/types"
	dblabModels "gitlab.com/postgres-ai/database-lab/v3/pkg/models"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &CloneResource{}
var _ resource.ResourceWithImportState = &CloneResource{}

func NewCloneResource() resource.Resource {
	return &CloneResource{}
}

// CloneResource defines the resource implementation.
type CloneResource struct {
	dblabClient *dblabapi.Client
}

// CloneResourceModel describes the resource data model.
type CloneResourceModel struct {
	Id               types.String `tfsdk:"id"`
	SnapshotId       types.String `tfsdk:"snapshot_id"`
	Protected        types.Bool   `tfsdk:"protected"`
	DatabaseUsername types.String `tfsdk:"database_username"`
	DatabasePassword types.String `tfsdk:"database_password"`

	Port         types.String `tfsdk:"port"`
	DatabaseName types.String `tfsdk:"database_name"`
}

func (r *CloneResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_clone"
}

func (r *CloneResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "Database clone",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				MarkdownDescription: "Identifier of the clone, can be provided by user or generated by the server.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"snapshot_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				MarkdownDescription: "Snapshot identifier to use for the clone. If unset the latest snapshot will be used.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"protected": schema.BoolAttribute{
				Required:            true,
				MarkdownDescription: "When enabled no one can delete this clone via API & UI and automated deletion is also disabled. Note that destroy operation will unset it first.",
			},

			"database_username": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Custom credentials for the database clone.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"database_password": schema.StringAttribute{
				Required:            true,
				Sensitive:           true,
				MarkdownDescription: "Custom credentials for the database clone.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},

			"database_name": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The name of the database in the clone.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"port": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The port to acces clone's PostgreSQL instance.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

func (r *CloneResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	data, ok := req.ProviderData.(*DBLabProviderModel)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *DBLabProviderModel, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}
	client, err := dblabapi.NewClient(dblabapi.Options{
		Host:              data.Endpoint.ValueString(),
		VerificationToken: data.VerificationToken.ValueString(),
	})
	if err != nil {
		resp.Diagnostics.AddError(
			"Configuration error",
			fmt.Sprintf("Could not configure DBLab API clinet: %s.", err),
		)
		return
	}

	r.dblabClient = client
}

func (r *CloneResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *CloneResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	createCloneRequest := dblabTypes.CloneCreateRequest{
		DB: &dblabTypes.DatabaseRequest{
			Username:   data.DatabaseUsername.ValueString(),
			Password:   data.DatabasePassword.ValueString(),
			Restricted: false,
		},
	}

	if !data.Id.IsNull() {
		createCloneRequest.ID = data.Id.ValueString()
	}

	if !data.Protected.IsNull() {
		createCloneRequest.Protected = data.Protected.ValueBool()
	}

	if !data.SnapshotId.IsNull() && !data.SnapshotId.IsUnknown() {
		createCloneRequest.Snapshot = &dblabTypes.SnapshotCloneFieldRequest{
			ID: data.SnapshotId.ValueString(),
		}
	}

	dblabResponse, err := r.dblabClient.CreateClone(ctx, createCloneRequest)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("CreateClone request failed, got error: %s", err))
		return
	}

	// Creating the clone is an async operation, we need to poll the server for the clone's status

	cloneId := dblabResponse.ID

	createStateConf := sdkResource.StateChangeConf{
		Delay:        2 * time.Second,
		PollInterval: 5 * time.Second,
		Timeout:      30 * time.Second,
		Refresh: func() (any, string, error) {
			statusResponse, err := r.dblabClient.GetClone(ctx, cloneId)
			if err != nil {
				resp.Diagnostics.AddError("Client Error", fmt.Sprintf("GetClone request failed, got error: %s", err))
				return 0, "", err
			}

			return statusResponse, string(statusResponse.Status.Code), nil
		},
		Pending: []string{string(dblabModels.StatusCreating)},
		Target:  []string{string(dblabModels.StatusOK)},
	}

	waitStateResponse, err := createStateConf.WaitForStateContext(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Error waiting for clone to be created, got error: %s", err))
		return
	}

	statusResponse, ok := waitStateResponse.(*dblabModels.Clone)
	if !ok {
		resp.Diagnostics.AddError(
			"Client Error",
			fmt.Sprintf("Expected *dblabModels.clone, got: %T. Please report this issue to the provider developers.", waitStateResponse),
		)
		return
	}

	data.Id = types.StringValue(cloneId)
	data.Port = types.StringValue(statusResponse.DB.Port)
	data.DatabaseName = types.StringValue(statusResponse.DB.DBName)
	data.Protected = types.BoolValue(statusResponse.Protected)
	data.SnapshotId = types.StringValue(statusResponse.Snapshot.ID)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CloneResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *CloneResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	dblabResponse, err := r.dblabClient.GetClone(ctx, data.Id.ValueString())

	var dblabError dblabModels.Error
	if errors.As(err, &dblabError) {
		tflog.Error(ctx, fmt.Sprintf("error %v: %s", dblabError.Code, dblabError.Message))
		if dblabError.Code == dblabModels.ErrCodeNotFound {
			resp.State.RemoveResource(ctx)
			return
		}
	}

	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("GetClone for %s request failed, got error: %s", data.Id.ValueString(), err))
		return
	}

	data.Id = types.StringValue(dblabResponse.ID)
	data.Port = types.StringValue(dblabResponse.DB.Port)
	data.DatabaseName = types.StringValue(dblabResponse.DB.DBName)
	data.DatabaseUsername = types.StringValue(dblabResponse.DB.Username)
	data.SnapshotId = types.StringValue(dblabResponse.Snapshot.ID)
	data.Protected = types.BoolValue(dblabResponse.Protected)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CloneResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *CloneResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if !data.Protected.IsNull() {
		_, err := r.dblabClient.UpdateClone(ctx, data.Id.ValueString(),
			dblabTypes.CloneUpdateRequest{Protected: data.Protected.ValueBool()},
		)
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create example, got error: %s", err))
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CloneResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *CloneResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if !data.Protected.IsNull() && data.Protected.ValueBool() {
		_, err := r.dblabClient.UpdateClone(ctx, data.Id.ValueString(),
			dblabTypes.CloneUpdateRequest{Protected: false},
		)
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("UpdateClone request failed, unable to unset protected state, got error: %s", err))
		}
	}

	err := r.dblabClient.DestroyClone(ctx, data.Id.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("DestroyClone request failed, got error: %s", err))
		return
	}

}

func (r *CloneResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
